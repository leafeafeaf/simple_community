{"ast":null,"code":"export default {\n  data() {\n    return {\n      is_id: false,\n      is_email: false,\n      msg: \"\"\n    };\n  },\n  methods: {\n    //함수 설정하는 곳\n    //백엔드에서 id 중복 체크하기\n    getIdCheck() {\n      this.axios.get(\"/id-check\", {\n        params: {\n          user_id: \"야야\"\n        }\n      })\n      //정상적으로 응답이 왔을시 실행\n      .then(res => {\n        this.is_id = res.data.result;\n        if (this.is_id == true) {\n          this.msg = \"사용가능합니다\";\n          console.log(\"사용\");\n        } else {\n          this.msg = \"사용 할 수 없습니다.\";\n          console.log(\"사용불가\");\n        }\n      })\n      //비정상,오류 시 실행\n      .catch(err => {\n        console.error(err);\n      });\n    },\n    //백엔드에서 email 중복 체크하기\n    getEmailCheck() {\n      this.axios.get(\"/email-check\", {\n        params: {\n          email: null\n        }\n      })\n      //정상적으로 응답이 왔을시 실행\n      .then(res => {\n        this.is_email = res.data.result;\n      })\n      //비정상,오류 시 실행\n      .catch(err => {\n        console.error(err);\n      });\n    }\n    //게시글 상세 내용으로 페이지 이동\n  }\n};","map":{"version":3,"names":["data","is_id","is_email","msg","methods","getIdCheck","axios","get","params","user_id","then","res","result","console","log","catch","err","error","getEmailCheck","email"],"sources":["C:\\project_vue\\simple_community\\frontend\\src\\views\\SignView.vue"],"sourcesContent":["<template lang=\"\">\r\n  <form action=\"\" method=\"\">\r\n    <table class=\"table\">\r\n      <tbody>\r\n        <tr>\r\n          <th class=\"table-row\">\r\n            <div class=\"info\">아이디</div>\r\n          </th>\r\n          <td>\r\n            <div>\r\n              <input type=\"text\" name=\"\" id=\"\" />\r\n              <button @click=\"getIdCheck\">중복체크</button>\r\n              <span>{{ msg }}</span>\r\n            </div>\r\n            <div>3~20자리 사이의 영문과 숫자로 이루어져야 함</div>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th class=\"table-row\">\r\n            <div class=\"info\">비밀번호</div>\r\n          </th>\r\n          <td>\r\n            <input type=\"password\" name=\"\" id=\"\" />\r\n            <div>비밀번호는 8~60자로 되어야 함</div>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th class=\"table-row\">\r\n            <div class=\"info\">비밀번호 확인</div>\r\n          </th>\r\n          <td>\r\n            <input type=\"password\" name=\"\" id=\"\" />\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th class=\"table-row\">\r\n            <div class=\"info\">이메일 주소</div>\r\n          </th>\r\n          <td>\r\n            <input type=\"email\" name=\"\" id=\"\" />\r\n            <div>naver.com 메일 주소만 가입 가능함</div>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <div class=\"btn-div\">\r\n      <button type=\"submit\" class=\"btn\">등록</button>\r\n      <button class=\"btn\"><router-link to=\"/\">취소</router-link></button>\r\n    </div>\r\n  </form>\r\n</template>\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      is_id: false,\r\n      is_email: false,\r\n      msg: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    //함수 설정하는 곳\r\n    //백엔드에서 id 중복 체크하기\r\n    getIdCheck() {\r\n      this.axios\r\n        .get(\"/id-check\", {\r\n          params: {\r\n            user_id: \"야야\",\r\n          },\r\n        })\r\n        //정상적으로 응답이 왔을시 실행\r\n        .then((res) => {\r\n          this.is_id = res.data.result;\r\n          if (this.is_id == true) {\r\n            this.msg = \"사용가능합니다\";\r\n            console.log(\"사용\");\r\n          } else {\r\n            this.msg = \"사용 할 수 없습니다.\";\r\n            console.log(\"사용불가\");\r\n          }\r\n        })\r\n        //비정상,오류 시 실행\r\n        .catch((err) => {\r\n          console.error(err);\r\n        });\r\n    },\r\n    //백엔드에서 email 중복 체크하기\r\n    getEmailCheck() {\r\n      this.axios\r\n        .get(\"/email-check\", {\r\n          params: {\r\n            email: null,\r\n          },\r\n        })\r\n        //정상적으로 응답이 왔을시 실행\r\n        .then((res) => {\r\n          this.is_email = res.data.result;\r\n        })\r\n        //비정상,오류 시 실행\r\n        .catch((err) => {\r\n          console.error(err);\r\n        });\r\n    },\r\n    //게시글 상세 내용으로 페이지 이동\r\n  },\r\n};\r\n</script>\r\n<style scoped>\r\na {\r\n  text-decoration-line: none;\r\n  color: black;\r\n}\r\n\r\ninput {\r\n  width: 200px;\r\n}\r\n\r\n.table {\r\n  border-spacing: 10px;\r\n}\r\n.table th {\r\n  padding: 10px 10px 10px;\r\n  border-top: 1px solid #000000;\r\n  border-bottom: 1px solid #000000;\r\n  text-align: left;\r\n}\r\n.table td {\r\n  padding: 10px 10px 10px;\r\n  text-align: left;\r\n}\r\n.table-row {\r\n  background-color: #e7dede;\r\n}\r\n\r\n.btn-div {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 10px;\r\n}\r\n.btn {\r\n  width: 100px;\r\n  padding: 5px;\r\n  margin: 10px;\r\n  font-weight: bold;\r\n}\r\n</style>\r\n"],"mappings":"AAoDA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,KAAK;MACZC,QAAQ,EAAE,KAAK;MACfC,GAAG,EAAE;IACP,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACA;IACAC,UAAUA,CAAA,EAAG;MACX,IAAI,CAACC,KAAI,CACNC,GAAG,CAAC,WAAW,EAAE;QAChBC,MAAM,EAAE;UACNC,OAAO,EAAE;QACX;MACF,CAAC;MACD;MAAA,CACCC,IAAI,CAAEC,GAAG,IAAK;QACb,IAAI,CAACV,KAAI,GAAIU,GAAG,CAACX,IAAI,CAACY,MAAM;QAC5B,IAAI,IAAI,CAACX,KAAI,IAAK,IAAI,EAAE;UACtB,IAAI,CAACE,GAAE,GAAI,SAAS;UACpBU,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;QACnB,OAAO;UACL,IAAI,CAACX,GAAE,GAAI,cAAc;UACzBU,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;QACrB;MACF,CAAC;MACD;MAAA,CACCC,KAAK,CAAEC,GAAG,IAAK;QACdH,OAAO,CAACI,KAAK,CAACD,GAAG,CAAC;MACpB,CAAC,CAAC;IACN,CAAC;IACD;IACAE,aAAaA,CAAA,EAAG;MACd,IAAI,CAACZ,KAAI,CACNC,GAAG,CAAC,cAAc,EAAE;QACnBC,MAAM,EAAE;UACNW,KAAK,EAAE;QACT;MACF,CAAC;MACD;MAAA,CACCT,IAAI,CAAEC,GAAG,IAAK;QACb,IAAI,CAACT,QAAO,GAAIS,GAAG,CAACX,IAAI,CAACY,MAAM;MACjC,CAAC;MACD;MAAA,CACCG,KAAK,CAAEC,GAAG,IAAK;QACdH,OAAO,CAACI,KAAK,CAACD,GAAG,CAAC;MACpB,CAAC,CAAC;IACN;IACA;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}