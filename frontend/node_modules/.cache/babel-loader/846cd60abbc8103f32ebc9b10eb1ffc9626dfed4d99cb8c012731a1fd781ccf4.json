{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      is_id: false,\n      is_email: false,\n      is_pw: false,\n      user_id: \"\",\n      email: \"\",\n      pw: \"\",\n      pw_ok: \"\"\n    };\n  },\n  methods: {\n    //함수 설정하는 곳\n    //백엔드에서 id 중복 체크하기\n    getIdCheck() {\n      // 아이디 형식 체크\n      var regType = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{3,20}$/;\n      if (!regType.test(this.user_id)) {\n        alert(\"아이디 형식이 맞지 않습니다\");\n        return;\n      }\n      this.axios.get(\"/id-check\", {\n        params: {\n          user_id: this.user_id\n        }\n      })\n      //정상적으로 응답이 왔을시 실행\n      .then(res => {\n        this.is_id = res.data.result;\n        if (this.is_id == true) {\n          alert(\"사용가능\");\n        } else {\n          alert(\"사용불가능\");\n        }\n      })\n      //비정상,오류 시 실행\n      .catch(err => {\n        console.error(err);\n      });\n    },\n    //백엔드에서 email 중복 체크하기\n    getEmailCheck() {\n      // 이메일 형식 체크\n      var regType = /^[a-zA-Z0-9]+@[a-zA-Z0-9]+$/;\n      if (!regType.test(this.email)) {\n        alert(\"이메일 형식이 맞지 않습니다\");\n        return;\n      }\n      this.axios.get(\"/email-check\", {\n        params: {\n          email: this.email\n        }\n      })\n      //정상적으로 응답이 왔을시 실행\n      .then(res => {\n        this.is_email = res.data.result;\n        if (this.is_email == true) {\n          alert(\"사용가능\");\n        } else {\n          alert(\"사용불가능\");\n        }\n      })\n      //비정상,오류 시 실행\n      .catch(err => {\n        console.error(err);\n      });\n    },\n    // 등록 시 회원 추가\n    postSign() {\n      // 중복 체크 먼저 해야함\n      if (!this.is_id) {\n        alert(\"아이디를 확인해주세요\");\n        return;\n      }\n      if (!this.is_email) {\n        alert(\"이메일을 확인해주세요\");\n        return;\n      }\n      if (this.pw.length < 4 || this.pw.length > 60) {\n        alert(\"비밀번호 형식이 올바르지 않아요\");\n        return;\n      }\n      if (this.pw != this.pw_ok) {\n        alert(\"비밀번호 확인이 같지않아요\");\n        return;\n      }\n\n      // 정상시 유저 등록\n      this.axios.post(\"/sign\", {\n        user_id: this.user_id,\n        email: this.email,\n        pw: this.pw\n      }).then(res => {\n        console.log(\"성공\", res);\n      }).catch(res => {\n        console.error(\"실패\", res);\n      }).then(() => {\n        this.$router.push({\n          name: \"login\"\n        });\n      });\n    }\n  },\n  computed: {\n    pwCheck() {\n      if (this.pw.length >= 4 && this.pw.length <= 60 && this.pw_ok.length >= 4 && this.pw_ok.length <= 60) {\n        if (this.pw != this.pw_ok) {\n          return \"두 비밀번호가 같지 않아요\";\n        } else {\n          return \"같아요\";\n        }\n      } else return \"\";\n    }\n  }\n};","map":{"version":3,"names":["data","is_id","is_email","is_pw","user_id","email","pw","pw_ok","methods","getIdCheck","regType","test","alert","axios","get","params","then","res","result","catch","err","console","error","getEmailCheck","postSign","length","post","log","$router","push","name","computed","pwCheck"],"sources":["C:\\vscode\\simple_community\\frontend\\src\\views\\SignView.vue"],"sourcesContent":["<template lang=\"\">\r\n  <div>\r\n    <table class=\"table\">\r\n      <tbody>\r\n        <tr>\r\n          <th class=\"table-row\">\r\n            <div class=\"info\">아이디</div>\r\n          </th>\r\n          <td>\r\n            <div class=\"id-div\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"\"\r\n                id=\"\"\r\n                v-model=\"user_id\"\r\n                class=\"table-input\"\r\n              />\r\n              <input\r\n                type=\"button\"\r\n                value=\"중복체크\"\r\n                @click=\"getIdCheck\"\r\n                class=\"table-btn\"\r\n              />\r\n            </div>\r\n            <div>3~20자리 사이의 영문과 숫자로 이루어져야 함</div>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th class=\"table-row\">\r\n            <div class=\"info\">비밀번호</div>\r\n          </th>\r\n          <td>\r\n            <input type=\"password\" name=\"\" id=\"\" v-model=\"pw\" />\r\n            <div>비밀번호는 4~60자로 되어야 함</div>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th class=\"table-row\">\r\n            <div class=\"info\">비밀번호 확인</div>\r\n          </th>\r\n          <td>\r\n            <input type=\"password\" name=\"\" id=\"\" v-model=\"pw_ok\" />\r\n            <div>{{ pwCheck }}</div>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th class=\"table-row\">\r\n            <div class=\"info\">이메일 주소</div>\r\n          </th>\r\n          <td>\r\n            <div>\r\n              <input type=\"email\" name=\"\" id=\"\" v-model=\"email\" />\r\n              <input type=\"button\" value=\"중복체크\" @click=\"getEmailCheck\" />\r\n            </div>\r\n            <div>naver.com 메일 주소만 가입 가능함</div>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <div class=\"btn-div\">\r\n      <button type=\"submit\" class=\"btn\" @click=\"postSign\">등록</button>\r\n      <button class=\"btn\"><router-link to=\"/login\">취소</router-link></button>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      is_id: false,\r\n      is_email: false,\r\n      is_pw: false,\r\n      user_id: \"\",\r\n      email: \"\",\r\n      pw: \"\",\r\n      pw_ok: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    //함수 설정하는 곳\r\n    //백엔드에서 id 중복 체크하기\r\n    getIdCheck() {\r\n      // 아이디 형식 체크\r\n      var regType = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{3,20}$/;\r\n      if (!regType.test(this.user_id)) {\r\n        alert(\"아이디 형식이 맞지 않습니다\");\r\n        return;\r\n      }\r\n\r\n      this.axios\r\n        .get(\"/id-check\", {\r\n          params: {\r\n            user_id: this.user_id,\r\n          },\r\n        })\r\n        //정상적으로 응답이 왔을시 실행\r\n        .then((res) => {\r\n          this.is_id = res.data.result;\r\n          if (this.is_id == true) {\r\n            alert(\"사용가능\");\r\n          } else {\r\n            alert(\"사용불가능\");\r\n          }\r\n        })\r\n        //비정상,오류 시 실행\r\n        .catch((err) => {\r\n          console.error(err);\r\n        });\r\n    },\r\n    //백엔드에서 email 중복 체크하기\r\n    getEmailCheck() {\r\n      // 이메일 형식 체크\r\n      var regType = /^[a-zA-Z0-9]+@[a-zA-Z0-9]+$/;\r\n      if (!regType.test(this.email)) {\r\n        alert(\"이메일 형식이 맞지 않습니다\");\r\n        return;\r\n      }\r\n\r\n      this.axios\r\n        .get(\"/email-check\", {\r\n          params: {\r\n            email: this.email,\r\n          },\r\n        })\r\n        //정상적으로 응답이 왔을시 실행\r\n        .then((res) => {\r\n          this.is_email = res.data.result;\r\n          if (this.is_email == true) {\r\n            alert(\"사용가능\");\r\n          } else {\r\n            alert(\"사용불가능\");\r\n          }\r\n        })\r\n        //비정상,오류 시 실행\r\n        .catch((err) => {\r\n          console.error(err);\r\n        });\r\n    },\r\n    // 등록 시 회원 추가\r\n    postSign() {\r\n      // 중복 체크 먼저 해야함\r\n      if (!this.is_id) {\r\n        alert(\"아이디를 확인해주세요\");\r\n        return;\r\n      }\r\n      if (!this.is_email) {\r\n        alert(\"이메일을 확인해주세요\");\r\n        return;\r\n      }\r\n      if (this.pw.length < 4 || this.pw.length > 60) {\r\n        alert(\"비밀번호 형식이 올바르지 않아요\");\r\n        return;\r\n      }\r\n      if (this.pw != this.pw_ok) {\r\n        alert(\"비밀번호 확인이 같지않아요\");\r\n        return;\r\n      }\r\n\r\n      // 정상시 유저 등록\r\n      this.axios\r\n        .post(\"/sign\", {\r\n          user_id: this.user_id,\r\n          email: this.email,\r\n          pw: this.pw,\r\n        })\r\n        .then((res) => {\r\n          console.log(\"성공\", res);\r\n        })\r\n        .catch((res) => {\r\n          console.error(\"실패\", res);\r\n        })\r\n        .then(() => {\r\n          this.$router.push({\r\n            name: \"login\",\r\n          });\r\n        });\r\n    },\r\n  },\r\n  computed: {\r\n    pwCheck() {\r\n      if (\r\n        this.pw.length >= 4 &&\r\n        this.pw.length <= 60 &&\r\n        this.pw_ok.length >= 4 &&\r\n        this.pw_ok.length <= 60\r\n      ) {\r\n        if (this.pw != this.pw_ok) {\r\n          return \"두 비밀번호가 같지 않아요\";\r\n        } else {\r\n          return \"같아요\";\r\n        }\r\n      } else return \"\";\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style scoped>\r\na {\r\n  text-decoration-line: none;\r\n  color: black;\r\n}\r\n\r\ninput {\r\n  width: 200px;\r\n}\r\n\r\n.table {\r\n  border-spacing: 10px;\r\n}\r\n.table th {\r\n  padding: 10px 10px 10px;\r\n  border-top: 1px solid #000000;\r\n  border-bottom: 1px solid #000000;\r\n  text-align: left;\r\n}\r\n.table td {\r\n  padding: 10px 10px 10px;\r\n  text-align: left;\r\n}\r\n.id-div {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: stretch;\r\n}\r\n.table-input {\r\n  width: 70%;\r\n  padding: 7px;\r\n}\r\n.table-btn {\r\n  width: 15%;\r\n}\r\n.table-row {\r\n  background-color: #e7dede;\r\n}\r\n\r\n.btn-div {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 10px;\r\n}\r\n.btn {\r\n  width: 100px;\r\n  padding: 5px;\r\n  margin: 10px;\r\n  font-weight: bold;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}