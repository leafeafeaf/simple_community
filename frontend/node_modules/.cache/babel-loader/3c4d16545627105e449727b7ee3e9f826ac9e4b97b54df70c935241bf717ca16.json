{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, vModelText as _vModelText, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-331cf118\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */));\nconst _hoisted_2 = {\n  class: \"title-div\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */));\nconst _hoisted_4 = {\n  class: \"writer-div\"\n};\nconst _hoisted_5 = {\n  class: \"viewnum-div\"\n};\nconst _hoisted_6 = {\n  class: \"content\"\n};\nconst _hoisted_7 = {\n  class: \"recom-div\"\n};\nconst _hoisted_8 = {\n  class: \"recom\"\n};\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"input\", {\n  class: \"recom-btn\",\n  type: \"button\",\n  value: \"좋아요\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */));\nconst _hoisted_11 = {\n  class: \"comment-writer-div\"\n};\nconst _hoisted_12 = {\n  class: \"comment-writer\"\n};\nconst _hoisted_13 = {\n  class: \"comment-date\"\n};\nconst _hoisted_14 = {\n  class: \"comment-content-div\"\n};\nconst _hoisted_15 = {\n  class: \"comment-content\"\n};\nconst _hoisted_16 = [\"onClick\"];\nconst _hoisted_17 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */));\nconst _hoisted_18 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", null, \"댓글 번호\", -1 /* HOISTED */));\nconst _hoisted_19 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"comment-write\"\n}, \"댓글 쓰기\", -1 /* HOISTED */));\nconst _hoisted_20 = {\n  class: \"comment-post\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", null, [_createElementVNode(\"div\", null, [_hoisted_1, _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", null, _toDisplayString($data.contentDetail.title), 1 /* TEXT */), _createElementVNode(\"div\", null, _toDisplayString($data.contentDetail.date), 1 /* TEXT */)]), _hoisted_3, _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", null, _toDisplayString($data.contentDetail.writer), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", null, \"조회 수 : \" + _toDisplayString($data.contentDetail.view_num), 1 /* TEXT */), _createElementVNode(\"div\", null, \"추천 수 : \" + _toDisplayString($data.contentDetail.recom_num), 1 /* TEXT */), _createElementVNode(\"div\", null, \"댓글 : \" + _toDisplayString($data.contentDetail.comment_num), 1 /* TEXT */)])])]), _createElementVNode(\"div\", null, [_createElementVNode(\"div\", _hoisted_6, _toDisplayString($data.contentDetail.content), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, _toDisplayString($data.contentDetail.recom_num), 1 /* TEXT */), _hoisted_9]), _createCommentVNode(\"(gid가 writer 같을때만 보이고 함수에서도 체크)\"), $options.isGid ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.pushModify && $options.pushModify(...args))\n  }, \"수정\")) : _createCommentVNode(\"v-if\", true), $options.isGid ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 1,\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.deleteContent && $options.deleteContent(...args))\n  }, \"삭제\")) : _createCommentVNode(\"v-if\", true)]), _hoisted_10, _createElementVNode(\"div\", null, [_createElementVNode(\"div\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.commentList, (comment, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: comment\n    }, [_createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"div\", _hoisted_12, _toDisplayString(comment.writer), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_13, _toDisplayString(comment.date), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"div\", _hoisted_15, _toDisplayString(comment.content), 1 /* TEXT */), this.equlCommentWriter(comment.writer) ? (_openBlock(), _createElementBlock(\"div\", {\n      key: 0,\n      class: \"comment-delete\",\n      onClick: $event => this.deleteComment(comment.comment_id, index)\n    }, \" 삭제 \", 8 /* PROPS */, _hoisted_16)) : _createCommentVNode(\"v-if\", true)]), _hoisted_17]);\n  }), 128 /* KEYED_FRAGMENT */))]), _hoisted_18, _createElementVNode(\"div\", null, [_hoisted_19, _createElementVNode(\"div\", _hoisted_20, [_withDirectives(_createElementVNode(\"textarea\", {\n    class: \"comment-textarea\",\n    name: \"\",\n    id: \"\",\n    cols: \"1\",\n    rows: \"3\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.comment_content = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.comment_content]]), _createElementVNode(\"input\", {\n    class: \"comment-btn\",\n    type: \"button\",\n    value: \"등록\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.postComment && $options.postComment(...args))\n  })])])])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","class","type","value","_createElementBlock","_Fragment","_hoisted_1","_hoisted_2","_toDisplayString","$data","contentDetail","title","date","_hoisted_3","_hoisted_4","writer","_hoisted_5","view_num","recom_num","comment_num","_hoisted_6","content","_hoisted_7","_hoisted_8","_hoisted_9","_createCommentVNode","$options","isGid","key","onClick","_cache","args","pushModify","deleteContent","_hoisted_10","_renderList","commentList","comment","index","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","equlCommentWriter","$event","deleteComment","comment_id","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","name","id","cols","rows","comment_content","postComment"],"sources":["C:\\vscode\\simple_community\\frontend\\src\\views\\ContentView.vue"],"sourcesContent":["<template lang=\"\">\r\n  <div>\r\n    <div>\r\n      <hr />\r\n      <div class=\"title-div\">\r\n        <div>{{ contentDetail.title }}</div>\r\n        <div>{{ contentDetail.date }}</div>\r\n      </div>\r\n      <hr />\r\n      <div class=\"writer-div\">\r\n        <div>{{ contentDetail.writer }}</div>\r\n        <div class=\"viewnum-div\">\r\n          <div>조회 수 : {{ contentDetail.view_num }}</div>\r\n          <div>추천 수 : {{ contentDetail.recom_num }}</div>\r\n          <div>댓글 : {{ contentDetail.comment_num }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div>\r\n      <div class=\"content\">{{ contentDetail.content }}</div>\r\n    </div>\r\n    <div class=\"recom-div\">\r\n      <div class=\"recom\">{{ contentDetail.recom_num }}</div>\r\n      <input class=\"recom-btn\" type=\"button\" value=\"좋아요\" />\r\n    </div>\r\n    <!--(gid가 writer 같을때만 보이고 함수에서도 체크)-->\r\n    <button @click=\"pushModify\" v-if=\"isGid\">수정</button>\r\n    <button @click=\"deleteContent\" v-if=\"isGid\">삭제</button>\r\n  </div>\r\n  <hr />\r\n  <div>\r\n    <div>\r\n      <div v-for=\"(comment, index) in commentList\" :key=\"comment\">\r\n        <div class=\"comment-writer-div\">\r\n          <div class=\"comment-writer\">{{ comment.writer }}</div>\r\n          <div class=\"comment-date\">{{ comment.date }}</div>\r\n        </div>\r\n        <div class=\"comment-content-div\">\r\n          <div class=\"comment-content\">{{ comment.content }}</div>\r\n          <div\r\n            class=\"comment-delete\"\r\n            v-if=\"this.equlCommentWriter(comment.writer)\"\r\n            @click=\"this.deleteComment(comment.comment_id, index)\"\r\n          >\r\n            삭제\r\n          </div>\r\n        </div>\r\n        <hr />\r\n      </div>\r\n    </div>\r\n    <div>댓글 번호</div>\r\n    <div>\r\n      <div class=\"comment-write\">댓글 쓰기</div>\r\n      <div class=\"comment-post\">\r\n        <textarea\r\n          class=\"comment-textarea\"\r\n          name=\"\"\r\n          id=\"\"\r\n          cols=\"1\"\r\n          rows=\"3\"\r\n          v-model=\"comment_content\"\r\n        ></textarea>\r\n        <input\r\n          class=\"comment-btn\"\r\n          type=\"button\"\r\n          value=\"등록\"\r\n          @click=\"postComment\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  setup() {},\r\n  props: {\r\n    content_id: {\r\n      type: Number,\r\n      default: 8,\r\n    },\r\n  },\r\n  created() {\r\n    this.getContentDetail(this.content_id);\r\n    this.getCommentList();\r\n  },\r\n  data() {\r\n    return {\r\n      contentDetail: {},\r\n      is_like: false,\r\n      commentList: [],\r\n      comment_content: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    // 게시글 불러오기 api 호출\r\n    getContentDetail(content_id) {\r\n      this.axios\r\n        .get(\"/content/\" + content_id, {\r\n          params: {\r\n            user_id: this.$user_id,\r\n          },\r\n        })\r\n        //정상적으로 응답이 왔을시 실행\r\n        .then((res) => {\r\n          this.contentDetail = res.data.content;\r\n          this.is_like = res.data.is_like;\r\n        })\r\n        //비정상,오류 시 실행\r\n        .catch((err) => {\r\n          console.error(err);\r\n        });\r\n    },\r\n    // 게시글 삭제 api 호출\r\n    deleteContent() {\r\n      if (this.store.state.gid == this.contentDetail.writer) {\r\n        alert(\"작성한 사용자만 삭제할 수 있습니다.\");\r\n        return;\r\n      }\r\n      this.axios\r\n        .delete(\"/content/\" + this.content_id)\r\n        .then((res) => {\r\n          console.log(res);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        })\r\n        .then(() => {\r\n          this.$router.replace({\r\n            name: \"main\",\r\n          }); //이동인데 뒤로가기 안됨\r\n        });\r\n    },\r\n    //수정 페이지로 이동\r\n    pushModify() {\r\n      if (this.store.state.gid == this.contentDetail.writer) {\r\n        alert(\"작성한 사용자만 수정할 수 있습니다.\");\r\n        return;\r\n      }\r\n      this.$router.push({\r\n        //이동인데 뒤로가기 됨\r\n        name: \"modify\",\r\n        params: {\r\n          contentDetail: JSON.stringify(this.contentDetail),\r\n        },\r\n      });\r\n    },\r\n    // 댓글 리스트 불러오기 api 호출\r\n    getCommentList() {\r\n      this.axios\r\n        .get(\"/comment/list/\" + this.content_id)\r\n        .then((res) => {\r\n          this.commentList = res.data;\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    },\r\n    // 댓글 작성 api 호출\r\n    postComment() {\r\n      if (!this.comment_content) {\r\n        alert(\"댓글을 입력해주세요\");\r\n        return;\r\n      }\r\n      if (!this.store.state.gid) {\r\n        alert(\"로그인 해주세요\");\r\n        this.$router.push({\r\n          name: \"login\",\r\n        });\r\n        return;\r\n      }\r\n      this.axios\r\n        .post(\"/comment\", {\r\n          content: this.comment_content,\r\n          content_id: this.content_id,\r\n          writer: this.store.state.gid,\r\n        })\r\n        .then((res) => {\r\n          this.commentList.push(res.data);\r\n          this.comment_content = \"\";\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    },\r\n    // 댓글 삭제 api 호출\r\n    deleteComment(comment_id, index) {\r\n      if (this.store.state.gid == this.commentList[index].writer) {\r\n        alert(\"작성한 사용자만 삭제할 수 있습니다.\");\r\n        return;\r\n      }\r\n      this.axios\r\n        .delete(\"/comment/\" + comment_id)\r\n        .then((res) => {\r\n          this.commentList.splice(index, 1);\r\n          alert(\"삭제 되었습니다.\");\r\n          console.log(res);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    },\r\n    //댓글 작성자와 현재 접속 id 같은지 유무\r\n    equlCommentWriter(writer) {\r\n      if (this.store.state.gid == writer) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    },\r\n\r\n    //추천 기능\r\n    postRecomandation() {\r\n      //is_like가 false고 gid가 없어 그러면 로그인 화면으로 ->\r\n      //로그인은 함\r\n      //is_like가 false 그러면 추천\r\n      //is_like가 true 그러면 추천 취소\r\n      if (!this.store.state.gid) {\r\n        alert(\"추천은 로그인한 사용자만 가능합니다\");\r\n        return;\r\n      }\r\n      do_like = is_like ? 1 : 0;\r\n    },\r\n  },\r\n  computed: {\r\n    isGid() {\r\n      if (this.store.state.gid == this.contentDetail.writer) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style scoped>\r\n.title-div {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin: 8px;\r\n}\r\n.writer-div {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-left: 8px;\r\n  margin-bottom: 8px;\r\n}\r\n.viewnum-div {\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n.viewnum-div > div {\r\n  margin-right: 8px;\r\n}\r\n.content {\r\n  text-align: left;\r\n  width: 100%;\r\n  padding: 20% 30px;\r\n  margin-bottom: 10px;\r\n  border-right: 0px solid black;\r\n  border-left: 0px solid black;\r\n}\r\n.recom-div {\r\n  margin: 16px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n.recom {\r\n  color: blue;\r\n  border: 1px solid black;\r\n  padding: 10px;\r\n  border-radius: 50%;\r\n  width: 40px;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n.recom-btn {\r\n  margin: 16px 0px;\r\n  width: 100px;\r\n}\r\n\r\n.comment-writer-div {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin: 8px;\r\n}\r\n.comment-write {\r\n  display: flex;\r\n  justify-content: left;\r\n  margin: 8px;\r\n}\r\n.comment-post {\r\n  display: flex;\r\n  align-items: stretch;\r\n  justify-content: center;\r\n}\r\n.comment-content-div {\r\n  margin: 8px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n}\r\n.comment-content {\r\n  text-align: left;\r\n}\r\n\r\n.comment-textarea {\r\n  width: 90%;\r\n  resize: none;\r\n  margin-right: 8px;\r\n  padding: 5px;\r\n}\r\n.comment-btn {\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}